{"version":3,"sources":["Components/Login.tsx","Components/Player.tsx","Components/TrackResult.tsx","Components/Dashboard.tsx","useAuth.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Login","bgItem","theme","useTheme","useState","images","setImages","value","onChange","imageList","addUpdateIndex","maxNumber","onImageUpload","onImageUpdate","Grid","container","direction","justify","alignItems","style","width","height","Button","variant","href","background","Player","accessToken","trackUri","playing","play","setPlay","useEffect","token","showSaveIcon","uris","callback","state","isPlaying","styles","bgColor","color","trackNameColor","initialVolume","TrackResult","track","chooseTrack","trackItem","item","xs","margin","Card","maxWidth","maxHeight","boxShadow","backdropFilter","borderRadius","border","CardActionArea","display","flexDirection","justifyContent","textAlign","onClick","CardMedia","component","image","albumUrl","title","uri","CardContent","Typography","artists","spotifyApi","SpotifyWebApi","clientId","Dashboard","code","setAccessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","Axios","post","then","res","window","history","pushState","data","catch","interval","setInterval","clearInterval","useAuth","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","setPlaying","queue","setQueue","playlist","formatted","off","listData","queueT","getPlaylistTracks","offset","val","body","items","map","t","push","next","debouncedVal","setDebouncedVal","timeoutId","setTimeout","includes","z","substring","console","log","name","album","url","i","length","j","Math","floor","random","temp","err","clearTimeout","useDebounced","noValidate","autoComplete","TextField","id","label","fullWidth","target","index","overflow","src","dataURL","alt","marginTop","overflowY","overflowX","undefined","position","bottom","URLSearchParams","location","get","createMuiTheme","palette","primary","main","secondary","default","spacing","App","className","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f346efc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Grid, Button,\n} from '@material-ui/core';\nimport {\n  MuiThemeProvider,\n  useTheme,\n} from '@material-ui/core/styles';\nimport ImageUploading, { ImageListType } from 'react-images-uploading';\n\nconst AUTH_URL = 'https://accounts.spotify.com/authorize?client_id=2a7b9ca071514e8a9fb2b2dea9953c8c&response_type=code&redirect_uri=http://localhost:3000/&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state';\n\ninterface Props{\n  // bg: ImageType,\n  // bgState:React.Dispatch<React.SetStateAction<ImageType>>,\n}\n\nexport const Login:(bg :Props) => JSX.Element = (bgItem:Props) => {\n  const theme = useTheme();\n  const [data, setData] = useState('');\n  const [images, setImages] = useState([]);\n\n  const onChange = (\n    imageList: ImageListType,\n    addUpdateIndex: number[] | undefined,\n  ) => {\n    setImages(imageList as never[]);\n  };\n\n  // function bgUpdate() {\n  //   const handler = (e:File) => {\n  //     const [file] = e;\n  //     console.log(e);\n  //     // if (file) {\n  //     // console.log(e);\n  //     // }\n  //   };\n  // }\n  return (\n\n    <ImageUploading value={images} onChange={onChange} maxNumber={1}>\n      {({ imageList, onImageUpload, onImageUpdate }) => (\n        <MuiThemeProvider theme={theme}>\n          <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" style={{ width: '100vw', height: '100vh' }}>\n            <Button\n              variant=\"contained\"\n              href={AUTH_URL}\n              style={{ background: 'linear-gradient(115deg, rgba(217,237,146,1) 0%, rgba(181,228,140,1) 10%, rgba(153,217,140,1) 20%, rgba(118,200,147,1) 30%, rgba(82,182,154,1) 40%, rgba(52,160,164,1) 50%, rgba(22,138,173,1) 60%, rgba(26,117,159,1) 70%, rgba(30,96,145,1) 80%, rgba(24,78,119,1) 90%)' }}\n            >\n              LOGIN TO SPOTIFY\n\n            </Button>\n          </Grid>\n          {/* {imageList.length !== 0 ? imageList.map((image, index) => (\n            <div\n              key={0}\n              style={{\n                width: '100vw',\n                height: '100vh',\n                backgroundImage: `url(${bgItem.bg.dataURL})`,\n                backgroundSize: '100vw',\n              }}\n            >\n              <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\"\n              style={{ width: '100vw', height: '100vh' }}>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    onImageUpdate(index);\n                  }}\n                  style={{ marginBottom: '1rem' }}\n                >\n                  CLICK TO UPDATE BG\n\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  href={AUTH_URL}\n                  style={{ background: 'linear-gradient(115deg, rgba(217,237,146,1) 0%,\n                  rgba(181,228,140,1) 10%,\n                  rgba(153,217,140,1) 20%, rgba(118,200,147,1) 30%, rgba(82,182,154,1) 40%,\n                  rgba(52,160,164,1) 50%,\n                  rgba(22,138,173,1) 60%, rgba(26,117,159,1) 70%, rgba(30,96,145,1) 80%,\n                   rgba(24,78,119,1) 90%)' }}\n                >\n                  LOGIN TO SPOTIFY\n\n                </Button>\n              </Grid>\n            </div>\n          )) : (\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\"\n            style={{ width: '100vw', height: '100vh' }}>\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  onImageUpload();\n                }}\n                style={{ marginBottom: '1rem' }}\n              >\n                CLICK TO CHANGE BG\n\n              </Button>\n              <Button\n                variant=\"contained\"\n                href={AUTH_URL}\n                style={{ background: 'linear-gradient(115deg, rgba(217,237,146,1) 0%,\n                rgba(181,228,140,1) 10%,\n                rgba(153,217,140,1) 20%, rgba(118,200,147,1) 30%, rgba(82,182,154,1) 40%,\n                 rgba(52,160,164,1)\n                50%, rgba(22,138,173,1) 60%, rgba(26,117,159,1) 70%, rgba(30,96,145,1) 80%,\n                rgba(24,78,119,1) 90%)' }}\n              >\n                LOGIN TO SPOTIFY\n\n              </Button>\n            </Grid>\n          )} */}\n\n        </MuiThemeProvider>\n      )}\n    </ImageUploading>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback';\n\ninterface Props{\n    accessToken: string,\n    trackUri: string|undefined|string[],\n    playing: React.Dispatch<React.SetStateAction<boolean>>,\n}\nexport const Player:React.FC<Props> = ({ accessToken, trackUri, playing }:Props) => {\n  const [play, setPlay] = useState(false);\n  useEffect(() => { setPlay(true); }, [trackUri]);\n  if (!accessToken) return null;\n  // if (trackUri === undefined) return null;\n  return (\n    <SpotifyPlayer\n      token={accessToken}\n      showSaveIcon\n      uris={trackUri || []}\n      callback={(state) => {\n        if (!state.isPlaying) {\n          setPlay(false);\n          playing(false);\n        } else {\n          setPlay(true);\n          playing(true);\n        }\n      }}\n      play={play}\n      styles={{\n        height: '6vh', bgColor: '#ffffff00', color: '#ffffff', trackNameColor: '#ffffff',\n      }}\n      initialVolume={10}\n    />\n  );\n  // if (trackUri.length > 1) {\n  //   return (\n  //     <SpotifyPlayer\n  //       token={accessToken}\n  //       showSaveIcon\n  //       uris={trackUri || []}\n  //       callback={(state) => {\n  //         if (!state.isPlaying) {\n  //           setPlay(false);\n  //           playing(false);\n  //         }\n  //       }}\n  //       play={play}\n  //       styles={{ height: '6vh', bgColor: '#222222', color: '#ffffff' }}\n  //       initialVolume={50}\n  //     />\n  //   );\n  // }\n  // return (\n  //   <SpotifyPlayer\n  //     token={accessToken}\n  //     showSaveIcon\n  //     uris={trackUri ? [trackUri] : []}\n  //     callback={(state) => {\n  //       if (!state.isPlaying) {\n  //         setPlay(false);\n  //         playing(false);\n  //       }\n  //     }}\n  //     play={play}\n  //     styles={{ height: '6vh', bgColor: '#222222', color: '#ffffff' }}\n  //     initialVolume={50}\n  //   />\n  // );\n};\n","import React from 'react';\n\nimport {\n  Typography, Grid,\n  CardActionArea, Card, CardMedia, CardContent,\n} from '@material-ui/core';\n\ninterface SpotifyData {\n    artists: string,\n          title: string,\n          uri: string,\n          albumUrl: string,\n}\n\ninterface Props{\n    track: SpotifyData;\n    chooseTrack: Function;\n}\nexport const TrackResult:({ track }:Props) => JSX.Element = ({ track, chooseTrack }:Props) => {\n  const trackItem = track;\n\n  function handlePlay() {\n    chooseTrack(track);\n  }\n\n  return (\n    <>\n      {/* <Grid item><Typography variant=\"h5\">{trackItem.albumUrl}</Typography></Grid> */}\n      <Grid\n        item\n        xs={6}\n        style={{\n          margin: '0.5rem',\n        }}\n      >\n        {/* <img src={trackItem.albumUrl} alt={trackItem.uri} /> */}\n        <Card style={{\n          width: '100vw',\n          height: '100vh',\n          maxWidth: '20vw',\n          maxHeight: '20vh',\n          background: 'rgba( 255, 255, 255, 0.25 )',\n          boxShadow: '0 8px 32px 0 rgba( 31, 38, 135, 0.37 )',\n          backdropFilter: 'blur( 4px )',\n          borderRadius: '10px',\n          border: '1px solid rgba( 255, 255, 255, 0.18 )',\n        }}\n        >\n          <CardActionArea\n            style={{\n              display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', textAlign: 'center',\n            }}\n            onClick={handlePlay}\n          >\n            <CardMedia\n              component=\"img\"\n              image={trackItem.albumUrl}\n              title={trackItem.uri}\n              style={{\n                width: '100vw', maxWidth: '10vw', height: '100vh', maxHeight: '20vh',\n              }}\n            />\n            <CardContent style={{\n              width: '100vw', maxWidth: '10vw',\n            }}\n            >\n              <Typography variant=\"body1\">{trackItem.title}</Typography>\n              <Typography variant=\"body2\">{trackItem.artists}</Typography>\n            </CardContent>\n          </CardActionArea>\n        </Card>\n      </Grid>\n    </>\n  );\n};\n","/* eslint-disable no-loop-func */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Grid, Button,\n} from '@material-ui/core';\nimport {\n  MuiThemeProvider,\n  useTheme,\n} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport ImageUploading, { ImageListType } from 'react-images-uploading';\nimport { Player } from './Player';\nimport { useAuth } from '../useAuth';\nimport { TrackResult } from './TrackResult';\nimport '../App.css';\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: '2a7b9ca071514e8a9fb2b2dea9953c8c',\n});\n\ninterface Props{\n    code: string|null,\n    // bg: ImageType|undefined\n}\n\ninterface SpotifyData {\n    artists: string,\n          title: string,\n          uri: string,\n          albumUrl: string,\n}\n\nexport const Dashboard:React.FC<Props> = ({ code }:Props) => {\n  const accessToken = useAuth(code || '');\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState<SpotifyData[]|undefined>([]);\n  const [playingTrack, setPlayingTrack] = useState<SpotifyData>();\n  const [playing, setPlaying] = useState(false);\n  const [queue, setQueue] = useState<string[]>([]);\n  const [images, setImages] = useState([]);\n  const theme = useTheme();\n  function chooseTrack(track:SpotifyData) {\n    setPlayingTrack(track);\n    setSearch('');\n  }\n  function playlist(formatted:string, off:number, listData:SpotifyData[], queueT:string[]) {\n    spotifyApi.getPlaylistTracks(formatted, { offset: off }).then((val) => {\n      // eslint-disable-next-line array-callback-return\n      val.body?.items.map((t) => {\n        queueT.push(t.track.uri);\n        // listData?.push({\n        //   artists: t.track.artists[0].name,\n        //   title: t.track.name,\n        //   uri: t.track.uri,\n        //   albumUrl: t.track.album.images[2].url,\n        // });\n      });\n      if (val.body.next) {\n        const newOff = off + 100;\n        playlist(formatted, newOff, listData, queueT);\n      }\n    });\n  }\n\n  function useDebounced(value: string) {\n    const [debouncedVal, setDebouncedVal] = useState(value);\n    useEffect(() => {\n      const timeoutId = setTimeout(() => {\n        setDebouncedVal(value);\n        if (!search) { setSearchResults([]); return; }\n        if (!accessToken) return;\n        if (!search.includes('playlist')) { return; }\n        let formatted = '';\n        let z = 34;\n        while (value.substring(z, z + 1) !== '?') {\n          formatted += value.substring(z, z + 1);\n          z += 1;\n        }\n        // let repeat = false;\n        spotifyApi.getPlaylistTracks(formatted, { offset: 0 }).then((res) => {\n          console.log(res);\n          // eslint-disable-next-line array-callback-return\n          const listData:SpotifyData[] = [];\n          // eslint-disable-next-line array-callback-return\n          res.body?.items.map((track) => {\n            queue.push(track.track.uri);\n            listData?.push({\n              artists: track.track.artists[0].name,\n              title: track.track.name,\n              uri: track.track.uri,\n              albumUrl: track.track.album.images[2].url,\n            });\n          });\n          if (res.body?.next) {\n            playlist(formatted, 100, listData, queue);\n          }\n\n          // console.log(listData);\n          for (let i = queue.length - 1; i > 0; i -= 1) {\n            const j = Math.floor(Math.random() * i);\n            const temp = queue[i];\n            queue[i] = queue[j];\n            queue[j] = temp;\n          }\n\n          setQueue(queue);\n          setSearchResults(listData);\n          // console.log(queue);\n        }, (err) => {\n          console.log(err);\n        });\n      }, 500);\n\n      // while(repeat) {\n      //       if (response.)\n      // }\n\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }, [value]);\n    return debouncedVal;\n  }\n  useDebounced(search);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  // useEffect(() => {\n  //   console.log(queue);\n  // }, [queue]);\n\n  // useEffect(() => {\n  //   console.log(images);\n  // }, [images]);\n\n  const onChange = (\n    imageList: ImageListType,\n    addUpdateIndex: number[] | undefined,\n  ) => {\n    setImages(imageList as never[]);\n  };\n\n  window.history.pushState({}, '', '/');\n  return (\n    <ImageUploading value={images} onChange={onChange} maxNumber={1}>\n      {({ imageList, onImageUpload, onImageUpdate }) => (\n        <MuiThemeProvider theme={theme}>\n          <Grid container direction=\"column\" alignItems=\"center\" style={{ width: '100vw', height: '90vh' }}>\n            {!playing ? (\n              <form noValidate autoComplete=\"off\" style={{ width: '100vw' }}>\n                <TextField\n                  id=\"filled-basic\"\n                  label=\"Paste spotify playlist code \"\n                  variant=\"filled\"\n                  value={search}\n                  fullWidth\n                  style={{\n                    background: 'linear-gradient(115deg, rgba(217,237,146,1) 0%, rgba(181,228,140,1) 10%, rgba(153,217,140,1) 20%, rgba(118,200,147,1) 30%, rgba(82,182,154,1) 40%, rgba(52,160,164,1) 50%, rgba(22,138,173,1) 60%, rgba(26,117,159,1) 70%, rgba(30,96,145,1) 80%, rgba(24,78,119,1) 90%)',\n                  }}\n                  onChange={(val) => {\n                    setSearch(val.target.value);\n                  }}\n                />\n              </form>\n            ) : <></>}\n\n            {images.length > 0 && playing\n              ? imageList.map((image, index) => (\n                <>\n                  <div style={{ width: '100vw', height: '100vh', overflow: 'none' }}>\n                    <img\n                      src={image.dataURL}\n                      alt=\"\"\n                      key={image.dataURL}\n                      style={{\n                        height: '100vh',\n                        width: '100%',\n                      }}\n                    />\n                  </div>\n                </>\n              )) : (\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    if (images.length > 0) {\n                      onImageUpdate(0);\n                    } else {\n                      onImageUpload();\n                    }\n                  }}\n                  style={{ marginTop: '1rem' }}\n                >\n                  CLICK TO CHANGE BG\n\n                </Button>\n              )}\n            {playing && images.length === 0 && (\n            <>\n              <div style={{\n                height: '80vh',\n                overflowY: 'auto',\n                width: '90vw',\n                marginTop: '1rem',\n              }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  alignItems=\"center\"\n                  justify=\"center\"\n                  style={{\n                    overflowX: 'hidden',\n                  }}\n                >\n                  {searchResults !== undefined\n                 && searchResults.map((track) => (\n                   <div key={track.uri}>\n                     <TrackResult track={track} chooseTrack={chooseTrack} />\n                   </div>\n                 ))}\n                </Grid>\n              </div>\n            </>\n\n            // eslint-disable-next-line array-callback-return\n            ) }\n          </Grid>\n          <div style={{\n            display: 'block', position: 'absolute', bottom: '1vh', width: '100vw',\n          }}\n          >\n            {queue.length > 0 ? (\n              <Player\n                accessToken={accessToken}\n                trackUri={queue}\n                playing={setPlaying}\n              />\n            )\n              : (\n                <Player\n                  accessToken={accessToken}\n                  trackUri={playingTrack?.uri}\n                  playing={setPlaying}\n                />\n              )}\n          </div>\n        </MuiThemeProvider>\n      )}\n    </ImageUploading>\n\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\n\ninterface Props{\n    code: string\n}\n\ninterface DataProp {\n    accessToken: string,\n    refreshToken: string,\n    expiresIn: number\n}\n\nexport const useAuth:(code :String) => string = (code :String) => {\n  const [accessToken, setAccessToken] = useState('');\n  const [refreshToken, setRefreshToken] = useState('');\n  const [expiresIn, setExpiresIn] = useState(0);\n\n  useEffect(() => {\n    Axios.post<DataProp>('https://spotify-web-server.herokuapp.com/login', {\n      code,\n    }).then((res) => {\n      window.history.pushState({}, '', '/');\n      setAccessToken(res.data.accessToken);\n      setRefreshToken(res.data.refreshToken);\n      setExpiresIn(res.data.expiresIn);\n    //   console.log(res.data.accessToken);\n    //   console.log(res.data);\n    }).catch(() => {\n    });\n  }, [code]);\n\n  useEffect(() => {\n    if (!refreshToken || !expiresIn) return;\n    const interval = setInterval(() => {\n      Axios.post<DataProp>('https://spotify-web-server.herokuapp.com/refresh', {\n        refreshToken,\n      }).then((res) => {\n        //   window.history.pushState({}, '', '/');\n        setAccessToken(res.data.accessToken);\n        //   setRefreshToken(res.data.refreshToken);\n        setExpiresIn(res.data.expiresIn);\n      }).catch(() => {\n      });\n    }, (expiresIn - 60) * 1000);\n\n    clearInterval(interval);\n  }, [refreshToken, expiresIn]);\n\n  return accessToken;\n};\n","import React from 'react';\nimport './App.css';\nimport {\n  CssBaseline,\n} from '@material-ui/core';\nimport {\n  createMuiTheme,\n  MuiThemeProvider,\n} from '@material-ui/core/styles';\nimport { Login } from './Components/Login';\nimport { Dashboard } from './Components/Dashboard';\n\nconst code = new URLSearchParams(window.location.search).get('code');\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#52b69a',\n    },\n    secondary: {\n      main: '#d9ed92',\n    },\n    background: {\n      default: '#222222',\n    },\n  },\n});\ntheme.spacing(4);\n\nfunction checking(item1:string|null) {\n  if (item1) {\n    return true;\n  }\n  return false;\n}\n\nconst App:React.FC = () => (\n  <MuiThemeProvider theme={theme}>\n    <div className=\"App\" style={{ width: '100vw', height: '100vh' }}>\n      <CssBaseline />\n      {code\n        ? <Dashboard code={code} />\n        : <Login />}\n    </div>\n  </MuiThemeProvider>\n\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}